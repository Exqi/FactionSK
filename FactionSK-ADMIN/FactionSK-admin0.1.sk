command f-admin [<text>] [<text>] [<text>]:
	permission: skript.faction.admin
	trigger:
		if arg-1 is "disband":
			if arg-2 is set:
				loop {x_factions_FAC::factions::*}:
					if loop-value is arg-2:
						set {_F} to arg-2
						if {x_factions_FAC::factions::%{_F}%::ally.activa} is true:
							set {_ally} to {x_factions_FAC::factions::%{_F}%::ally}
							delete {x_factions_FAC::faction::%{_ally}%::ally.activa}
							delete {x_factions_FAC::faction::%{_ally}%::ally}
							delete {x_factions_FAC::faction::%{_F}%::ally.activa}
							delete {x_factions_FAC::faction::%{_F}%::ally}
							make player execute "f neutral %{_ally}%"				
						loop {x_factions_FAC::factions::%{_F}%::players::*}:
							send "Faction deleted by an admin" to player from uuid loop-value-2
							set {x_factions_FAC::players::%loop-value-2%.faction} to "wilder" #Make him a wilder
							set {x_factions_FAC::players::%loop-value-2%.chat} to 1	#Force chat channel
						loop {x_factions_FAC::factions::%{_F}%::lands::*}:
							delete {x_factions_FAC::chunks::%loop-value-2%.owner}	
							delete {x_factions_FAC::chunks::%loop-value-2%}
						delete {x_factions_FAC::factions::%{_F}%::*}
						delete {x_factions_FAC::factions::%{_F}%}
						delete {x_factions_FAC::factions::%{_F}%.owner}
						delete {x_factions_FAC::factions::%{_F}%::lands::*}
						delete {x_factions_FAC::factions::%{_F}%::mods::*}
						delete {x_factions_FAC::factions::%{_F}%::players::*}
						send "Faction deleted"
						stop
				send "That faction does not exist"		
				stop

		if arg-1 is "kick":
			if arg-2 is set:
				set {_p} to uuid of arg-2 parsed as a player
				if {x_factions_FAC::players::%{_p}%.faction} isn't "wilder":
					set {_F} to {x_factions_FAC::players::%{_p}%.faction}
					if {x_factions_FAC::factions::%{_F}%::owner} is {_p}:
						send "Thans the owner, you can't kick him, use /f-admin disband"
					send "%% %player from uuid {_p}% was Kicked from %{_F}%"
					delete {x_factions_FAC::factions::%{_F}%::players::%{_p}%}
					if {x_factions_FAC::factions::%{_F}%::players::mods::%player%} is set:
						delete {x_factions_FAC::factions::%{_F}%::players::mods::%{_p}%}
					set {x_factions_FAC::players::%{_p}%.faction} to "wilder"
					set {x_factions_FAC::players.%{_p}%.chat} to 1
				else:
					send "%arg-2% is a wilder"
					
		if arg-1 is "givedtr":
			if arg-2 is set:
				if arg-3 is set:				
					loop {x_factions_FAC::factions::*}:
						if loop-value is arg-2:
							set {_F} to arg-2
							add arg-3 to {x_factions_FAC::factions::%{_F}%::dtr}
							send "Added %arg-3% dtr to %{_F}%"
							stop
					send "Faction not found"	
					stop
				else:
					send "Specify a faction"					
				

		if arg-1 is "removedtr":
			if arg-2 is set:
				if arg-3 is set:				
					loop {x_factions_FAC::factions::*}:
						if loop-value is arg-2:
							set {_F} to arg-2
							subtract arg-3 from {x_factions_FAC::factions::%{_F}%::dtr}
							send "Removed %arg-3% dtr to %{_F}%"
							stop
					send "Faction not found"	
					stop
				else:
					send "Specify a faction"
				

		if arg-1 is "stopfreeze":
			if arg-2 is set:
				loop {x_factions_FAC::factions::*}:
					if loop-value is arg-2:
						set {_F} to arg-2
						set {x_factions_FAC::factions::%{_F}%::dtr.freeze} to false
						send "Dtr freeze removed from faction %{_F}%"
						stop
				send "Faction not found"
				stop
			else:
				send "Specify a faction"
				

		if arg-1 is "addfreeze":
			if arg-2 is set:
				if arg-3 is set:
					loop {x_factions_FAC::factions::*}:
						if loop-value is arg-2:
							set {_F} to arg-2
							set {x_factions_FAC::factions::%{_F}%::dtr.freeze} to false
							add arg-3 to {x_factions_FAC::factions::%{_F}%::dtr.freeze}
							stop
					send "Faction not found"
					stop					
				else:	
					send "Specify an amount"
					stop
			else:			
				send "Specify a faction"
				stop
				

		if arg-1 is "refreshtag":
			loop all players:
				set {_F} to {x_factions_FAC::players::%uuid of loop-player%.faction}
				#TAG FACTIONS
				if {_F} isn't "wilder":		
					make all players see loop-player-1's prefix as "&c" 	
					loop {x_factions_FAC::factions::%{_F}%::players::*}:
						loop {x_factions_FAC::factions::%{_F}%::players::*}:	
							make player from uuid loop-value-2 see player from uuid loop-value-3's prefix as "&2"
						if {x_factions_FAC::factions::%{_F}%::ally.activa} is true:
							set {_ally} to {x_factions_FAC::factions::%{_F}%::ally}
							loop {x_factions_FAC::factions::%{_ally}%::players::*}:
								make player from uuid loop-value-3 see loop-value-1's prefix as "&d"	
				else:
					make all players see loop-player's prefix as "&c"

command f-warzone [<integer>]:
	trigger:
		if arg-1 is set:
			if arg-1 is more than 10:
				send "trust me, this will explode, use a number lesser than 10 [160x160 blocks]"
				stop
			set {_F} to "&4WarZone"
			set {_center} to player's location#location you want to loop the chunks around
			set {_radius} to arg-1#radius (in chunks), if it is set to 0 it returns only the chunk at {_center}
			set {_pos} to {_center}
			loop 2 * {_radius} + 1 times:
				set x-coordinate of {_pos} to x-coordinate of {_center} - 16 * {_radius} + (loop-number - 1) * 16
				set z-coordinate of {_pos} to z-coordinate of {_center} - 16 * {_radius}
				loop 2 * {_radius} + 1 times:
					set {_chunks::%{_pos}%} to chunk at {_pos}
					add 16 to z-coordinate of {_pos}
			#comienzo  buscar enemigos
			set {_enemigofound} to false
			loop {_chunks::*}:
				send "Claiming..."
				if {x_factions_FAC::factions::*} is set:
					loop {x_factions_FAC::factions::*}:
						set {_enemigos} to loop-value-2
						loop {x_factions_FAC::factions::%{_enemigos}%::lands::*}:
							if loop-value-1 is loop-value-3:
								send "&7The chunk %loop-value-1% is claimed by %{_enemigos}%, use /f-admin unclaim"
								send "this one won't be claimed as warzone"
							else:
								set {x_factions_FAC::chunks::%loop-value-1%} to loop-value-1
								set {x_factions_FAC::chunks::%loop-value-1%.owner} to "&4WarZone"
								if {x_factions_FAC::factions::%{_F}%} isn't set:
									set {x_factions_FAC::factions::%{_F}%} to {_F}
								set {x_factions_FAC::factions::%{_F}%::lands::%loop-value-1%} to loop-value-1
				else:
					set {x_factions_FAC::chunks::%loop-value-1%} to loop-value-1
					set {x_factions_FAC::chunks::%loop-value-1%.owner} to "&4WarZone"
					if {x_factions_FAC::factions::%{_F}%} isn't set:
						set {x_factions_FAC::factions::%{_F}%} to {_F}
					set {x_factions_FAC::factions::%{_F}%::lands::%loop-value-1%} to loop-value-1
				send "Claiming.."	
			send "Done!"		
		else:
			if {x_factions_FAC::chunks::%chunk at player's location%} isn't set:
				set {x_factions_FAC::chunks::%chunk at player's location%} to chunk at player's location
				set {x_factions_FAC::chunks::%chunk at player's location%.owner} to "&4WarZone"
				send "This chunk is now a warzone"
				stop
			else:
				send "This chunk is claimed by %{x_factions_FAC::chunks::%chunk at player's location%.owner}%"	
				stop			

command f-wilderness [<integer>]:	
	permission: skript.factions.admin
	trigger:
		if arg-1 is set:
			if arg-1 is more than 10:
				send "trust me, this will explode, use a number lesser than 10"
				stop
			set {_center} to player's location#location you want to loop the chunks around
			set {_radius} to arg-1#radius (in chunks), if it is set to 0 it returns only the chunk at {_center}
			set {_pos} to {_center}
			loop 2 * {_radius} + 1 times:
				set x-coordinate of {_pos} to x-coordinate of {_center} - 16 * {_radius} + (loop-number - 1) * 16
				set z-coordinate of {_pos} to z-coordinate of {_center} - 16 * {_radius}
				loop 2 * {_radius} + 1 times:
					set {_chunks::%{_pos}%} to chunk at {_pos}
					add 16 to z-coordinate of {_pos}
			#comienzo  buscar enemigos
			set {_enemigofound} to false
			loop {_chunks::*}:
				loop {x_factions_FAC::factions::*}:
					set {_enemigos} to loop-value-2
					loop {x_factions_FAC::factions::%{_enemigos}%::lands::*}:
						if loop-value-1 is loop-value-3:
							delete {x_factions_FAC::factions::%{_enemigos}%::lands::%loop-value-1%}
					delete {x_factions_FAC::chunks::%loop-value-1%}
					delete {x_factions_FAC::chunks::%loop-value-1%.owner}		
			send "All the chunks in a radius of %arg-1%, were deleted"				
		else:
			set {_chunk} to chunk at player's location
			if {x_factions_FAC::chunks::%chunk at player's location%} is set:
				set {_F} to  {x_factions_FAC::chunks::%chunk at player's location%.owner}
				delete {x_factions_FAC::chunks::%{_chunk}%}
				delete {x_factions_FAC::chunks::%{_F}%.%{_chunk}%}	
				delete {x_factions_FAC::factions::%{_F}%::lands::%{_chunk}%}
				delete {x_factions_FAC::chunks::%chunk at player's location%.owner}
				send "%% &7You unclaimed this chunk"
				stop
			else:
				send "%% &7Use this on a claimed land"
				stop
